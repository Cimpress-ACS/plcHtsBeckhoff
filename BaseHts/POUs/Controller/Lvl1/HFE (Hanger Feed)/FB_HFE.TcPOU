<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.19">
  <POU Name="FB_HFE" Id="{812595f4-a05e-4e59-bd40-1d6c3bfbbc6b}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HFE EXTENDS FB_CtrlBase
VAR_INPUT
	p_fbTlpDrive: POINTER TO FB_DRV;
	p_fbStopperBuffer: POINTER TO FB_STB;
	///p_fbJunction : POINTER TO FB_JUN;
	p_fbSLB: POINTER TO FB_SLB;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_HFE;
	/// Child controller
	pTlpDrive_CIf: POINTER TO T_Ctrl_CIf;
	pStopperBuffer_CIf: POINTER TO T_Ctrl_CIf;
	///pJunction_CIf : POINTER TO T_Ctrl_CIf;
	pSLB_CIf: POINTER TO T_Ctrl_CIf;
	pSLB_SIf: POINTER TO T_Ctrl_SIf_SLB;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Cylinder implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		02.07.2013		VP/RE		Start history
0.00.2		16.12.2013		AVME/MRU	In Always: No EOFF State!! in EOFF go to OFF

___________________________________________________________________________________________________*)



// check if child pointer valid
IF (me.bolActivate) AND (p_fbTlpDrive<>0) AND (p_fbStopperBuffer<>0) THEN // cyclic call enabled
	
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;

]]></ST>
    </Implementation>
    <Method Name="sta_RUN" Id="{dbbf58e4-c7c9-41c4-a10b-279e9896a091}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUN : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		//fbSimulationTimer.IN := FALSE;
		//fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udi_pulseTimeout_ms/10);
		//fbSimulationTimer(); // set time/reset timer
		//fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			//fbSimulationTimer(); // simulation time
			//IF (fbSimulationTimer.Q) THEN
			//	SIf.In.bolPulse.intern := NOT SIf.In.bolPulse.intern; // toggle pulse
			//	fbSimulationTimer.IN := FALSE;
			//ELSE
			//	fbSimulationTimer.IN := TRUE;
			//END_IF
		END_IF
		
		//IF NOT(pSLB_SIf^.Cur.bolBufferFull) THEN
		//	pStopperBuffer_CIf^.Job.intACmd := STB_CmdState.cCMD_RELEASE;
		//END_IF
		
		// State Change Condition
		IF me.intCmd=cCMD_OFF THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
		
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="IoInBridge" Id="{131f8d16-83a9-490d-89c7-d1e9eb7484a9}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
//SIf.In.bolGiveNextHangerSensor.map := THIS^.In_GiveNextHangerSensor;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	//getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolGiveNextHangerSensor));
ELSE
	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="sta_RUNBusy" Id="{b25ee442-1c59-44ea-b624-f4b38a557405}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pTlpDrive_CIf^.Job.intACmd := cCMD_RUN;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (pTlpDrive_CIf^.Job.intState = cSTA_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="StateMachine" Id="{26fc5825-79b4-4186-ac5a-1897bf9bd5d5}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	 cSTA_RUN: 
        THIS^.sta_RUN();
	cSTA_RUNBusy:
        THIS^.sta_RUNBusy();
END_CASE;]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="FB_init" Id="{469b4ae1-abb5-4fcb-a36d-ca9f9d08e66d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	ii: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
//ii := ii +1;
//CIf.Job.aCmdList[ii].intCmd := cCMD_RETRACT;
//CIf.Job.aCmdList[ii].strName := 'Retract';
//CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_LST'; 

// set alarm class
//SIf.Alm[1].eAlmClass := E_AlmClass.TSTOP;
//SIf.Alm[1].strText := 'TLKV Motor does not move after timeout.'; 
//SIf.Alm[2].eAlmClass := E_AlmClass.STOP;
//SIf.Alm[2].strText := 'Emergency button pressed.'; 

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parmeter
//SIf.Par.udiHangerLoadingTime_ms := 750;

// actual values
//SIf.Cur.dinCounter := 0;]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="Always" Id="{632534f7-0682-493b-bc0c-55c48fb35b4e}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	;
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF
]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="sta_OFF" Id="{4603cb6d-0352-4212-96b3-34de2c5eda44}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF me.intCmd=cCMD_RUN THEN
			me.StateMachine.intStateNext :=  cSTA_RUNBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="IoOutBridge" Id="{59c6a920-1bf1-4c6f-8a74-680aa301da04}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	//setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolClamping));

	//THIS^.Out_Clamping := SIf.Out.bolClamping.map;
END_IF]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="getCtrlSIf" Id="{3346a69e-396e-4a02-89e1-6edc32514951}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_HFE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Method Name="CtrlInit" Id="{e44f9f73-73e8-4433-91e6-33ded94e9bf7}">
      <Declaration><![CDATA[METHOD PROTECTED CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

// get child CIf
pTlpDrive_CIf := THIS^.AddChild(p_fbTlpDrive^);
pStopperBuffer_CIf := THIS^.AddChild(p_fbStopperBuffer^);
pSLB_CIf := THIS^.AddChild(p_fbSLB^);
pSLB_SIf := p_fbSLB^.getCtrlSIf();
]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>