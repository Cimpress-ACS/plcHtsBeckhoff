<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.23">
  <POU Name="FB_HFE" Id="{c6981df2-3e96-4d86-a844-3d0e43ed881a}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HFE EXTENDS FB_CtrlBase
VAR_INPUT
	a_bolLDSNeedsHanger: ARRAY[0..cuintMaxStation] OF BOOL;
	p_fbTlpDrive: POINTER TO FB_DRV;
	///p_fbJunction : POINTER TO FB_JUN;
	p_fbSLB: POINTER TO FB_SLB;
END_VAR
VAR
	/// List of pointers to Childs of VLV
	a_pMultiChildCtrl: ARRAY[0..Base_Const.cMaxNrOfChilds] OF POINTER TO FB_VLV;
	/// List of childs common interface
	a_pMultiChildCIF: ARRAY[0..Base_Const.cMaxNrOfChilds] OF POINTER TO T_Ctrl_CIf;
	/// List of childs specific interface for additional parameters or cur
	a_pMultiChildSIF: ARRAY[0..Base_Const.cMaxNrOfChilds] OF POINTER TO Base_Elements.T_Ctrl_SIf_VLV;
	usiNumOfMultiChild: USINT;
	usiNumOfValidPointerMultiChild: USINT;
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_HFE;
	/// Child controller
	pTlpDrive_CIf: POINTER TO T_Ctrl_CIf;
	///pJunction_CIf : POINTER TO T_Ctrl_CIf;
	pSLB_CIf: POINTER TO T_Ctrl_CIf;
	pSLB_SIf: POINTER TO T_Ctrl_SIf_SLB;
	intSubState: ARRAY[0..cuintMaxStation] OF INT;
	udiTimeInStateRefill_ms: ARRAY[0..cuintMaxStation] OF UDINT;
END_VAR
VAR CONSTANT
	/// sub States
	cSTA_SUB_WaitForJob: INT := 500;
	cSTA_SUB_WaitOpen: INT := 502;
	cSTA_SUB_Open: INT := 504;
	cSTA_SUB_WaitClose: INT := 506;
	cSTA_SUB_Close: INT := 508;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Cylinder implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		02.07.2013		VP/RE		Start history
0.00.2		16.12.2013		AVME/MRU	In Always: No EOFF State!! in EOFF go to OFF

___________________________________________________________________________________________________*)



// check if child pointer valid
IF (me.bolActivate) AND (p_fbTlpDrive<>0)  AND (THIS^.checkChildPointer()) AND (p_fbSLB<>0) THEN // cyclic call enabled
	
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;

]]></ST>
    </Implementation>
    <Method Name="checkChildPointer" Id="{377c738f-d178-499a-90e0-bd8c6ff78892}">
      <Declaration><![CDATA[METHOD PROTECTED checkChildPointer : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (usiNumOfMultiChild = usiNumOfValidPointerMultiChild) THEN
	checkChildPointer:= TRUE;
ELSE
	checkChildPointer:= FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{3f57e16b-6d71-4944-be5c-e9c8de0f6536}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pTlpDrive_CIf^.Job.intACmd := cCMD_RUN;
		pSLB_CIf^.Job.intACmd := Base_PLC.cCMD_RUN;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (pTlpDrive_CIf^.Job.intState = cSTA_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{4cac0705-f681-4002-849f-c39a6b418233}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	//setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolClamping));

	//THIS^.Out_Clamping := SIf.Out.bolClamping.map;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddJunction" Id="{51307a6c-c362-433e-bbf7-2151e7518882}">
      <Declaration><![CDATA[METHOD AddJunction
VAR_INPUT
	p_MultiChild: POINTER TO FB_JUN;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Method add the pointer address of the buffer zone child controller to the array list.
IF (usiNumOfMultiChild <= (Base_Const.cMaxNrOfChilds-1)) THEN
	// Add buffer zone child controller to list
	a_pMultiChildCtrl[usiNumOfMultiChild] := p_MultiChild;
	// Inc. number of buffer zones
	usiNumOfMultiChild:= usiNumOfMultiChild+1;
	// Check if the pointer is valid
	IF (p_MultiChild<>0) THEN
		usiNumOfValidPointerMultiChild:= usiNumOfValidPointerMultiChild+1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{63992788-f9ee-4ff3-9214-1a46ff8d92d1}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	 cSTA_RUN: 
        THIS^.sta_RUN();
	cSTA_RUNBusy:
        THIS^.sta_RUNBusy();
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{7c1dfef0-3e88-43e9-8666-9a2e0a755ef9}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
//SIf.In.bolGiveNextHangerSensor.map := THIS^.In_GiveNextHangerSensor;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	//getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolGiveNextHangerSensor));
ELSE
	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Refill" Id="{856b054f-7e87-4de9-9a2e-27c51c04afdb}">
      <Declaration><![CDATA[METHOD Refill
VAR_INPUT
	intNbOfLDS: INT;
END_VAR
VAR
	/// Loop variable
	ii: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Simulation
fbSimulationTimer.PT := UDINT_TO_TIME(1000);
IF (CIf.SwCfg.bolSimulation) THEN
	// Cyclicle input into the top stopperbuffer
	fbSimulationTimer(); // set time/reset timer
	IF fbSimulationTimer.Q = TRUE THEN
		fbSimulationTimer.IN := FALSE;
	ELSE
		fbSimulationTimer.IN := TRUE;
	END_IF
			
END_IF

// Method refill 
CASE intSubState[intNbOfLDS] OF
	cSTA_SUB_WaitForJob: // LDS needs hanger
		IF (a_bolLDSNeedsHanger[intNbOfLDS]) THEN
			IF (p_fbSLB^.CtrlCIf^.Info.p_aCIf[intNbOfLDS]^.job.intState = 6)THEN //	Just open if PreStopper is closed
				a_pMultiChildCIF[intNbOfLDS]^.Job.intACmd:= Base_Elements.VLV_CmdState.cCMD_OPEN;
				udiTimeInStateRefill_ms[intNbOfLDS] := 0;
				intSubState[intNbOfLDS] := cSTA_SUB_WaitOpen;
			END_IF
		END_IF
	
	cSTA_SUB_WaitOpen:	// Waiting time between STB closing and junction opening
		udiTimeInStateRefill_ms[intNbOfLDS]:= udiTimeInStateRefill_ms[intNbOfLDS] + me.FUBInfo.udiSample_ms;
		IF (udiTimeInStateRefill_ms[intNbOfLDS] > SIf.Par.udiWaitingTime_ms) THEN
			intSubState[intNbOfLDS] := cSTA_SUB_Open;
		END_IF
		
	cSTA_SUB_Open:	
		IF (a_bolLDSNeedsHanger[intNbOfLDS] = 0) THEN
			intSubState[intNbOfLDS] := cSTA_SUB_WaitClose;
		END_IF
		
	cSTA_SUB_WaitClose:	// Waiting time between STB closing and junction closing
		IF (p_fbSLB^.CtrlCIf^.Info.p_aCIf[intNbOfLDS]^.job.intState = 6)THEN //	Just close if PreStopper is closed
			udiTimeInStateRefill_ms[intNbOfLDS] := 0;
			intSubState[intNbOfLDS] := cSTA_SUB_Close;
		END_IF
		
	cSTA_SUB_Close:
		udiTimeInStateRefill_ms[intNbOfLDS]:= udiTimeInStateRefill_ms[intNbOfLDS] + me.FUBInfo.udiSample_ms;
		IF (udiTimeInStateRefill_ms[intNbOfLDS] > SIf.Par.udiWaitingTime_ms) THEN
			a_pMultiChildCIF[intNbOfLDS]^.Job.intACmd:= Base_Elements.VLV_CmdState.cCMD_Close;
			intSubState[intNbOfLDS] := cSTA_SUB_WaitForJob;
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8e502808-14af-414c-8759-358c0334fa54}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	ii: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
//ii := ii +1;
//CIf.Job.aCmdList[ii].intCmd := cCMD_RETRACT;
//CIf.Job.aCmdList[ii].strName := 'Retract';
//CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_HFE'; 

// set alarm class
//SIf.Alm[1].eAlmClass := E_AlmClass.TSTOP;
//SIf.Alm[1].strText := 'TLKV Motor does not move after timeout.'; 
//SIf.Alm[2].eAlmClass := E_AlmClass.STOP;
//SIf.Alm[2].strText := 'Emergency button pressed.'; 

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parmeter
SIf.Par.udiWaitingTime_ms := 100;
SIf.Par.a_bolEnableJunction[0] := TRUE; // First LDS is enabled

// configuration
SIf.Cfg.uintNbOfLDS := 1;

// actual values
//SIf.Cur.dinCounter := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{a16c069c-703e-4c01-a3c2-7b1c06e300e1}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF me.intCmd=cCMD_RUN THEN
			me.StateMachine.intStateNext :=  cSTA_RUNBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{a3c64f4c-52a8-4cfc-85f0-6d9ced2eacf0}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUN : BOOL
VAR
	intNbOfLDS: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		//fbSimulationTimer.IN := FALSE;
		//fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udi_pulseTimeout_ms/10);
		//fbSimulationTimer(); // set time/reset timer
		//fbSimulationTimer.IN := TRUE; // start timer
		FOR intNbOfLDS := 0 TO cintMaxStation DO
			intSubState[intNbOfLDS] := 500;	// Init Refill Substate
		END_FOR
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			//fbSimulationTimer(); // simulation time
			//IF (fbSimulationTimer.Q) THEN
			//	SIf.In.bolPulse.intern := NOT SIf.In.bolPulse.intern; // toggle pulse
			//	fbSimulationTimer.IN := FALSE;
			//ELSE
			//	fbSimulationTimer.IN := TRUE;
			//END_IF
		END_IF
		
		//IF NOT(pSLB_SIf^.Cur.bolBufferFull) THEN
		//	pStopperBuffer_CIf^.Job.intACmd := STB_CmdState.cCMD_RELEASE;
		//END_IF
		FOR intNbOfLDS := 0 TO cintMaxStation DO
			IF (SIf.Par.a_bolEnableJunction[intNbOfLDS]) AND (a_pMultiChildCtrl[intNbOfLDS]<>0) THEN
				Refill(intNbOfLDS);
			END_IF
		END_FOR
		
		// State Change Condition
		IF me.intCmd=cCMD_OFF THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
		
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{beb142c5-b4c7-438e-ac62-70a65f3bfa37}">
      <Declaration><![CDATA[METHOD PROTECTED CtrlInit : BOOL
VAR
	ii: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

// get child CIf
pTlpDrive_CIf := THIS^.AddChild(p_fbTlpDrive^);
pSLB_CIf := THIS^.AddChild(p_fbSLB^);
pSLB_SIf := p_fbSLB^.getCtrlSIf();

//initialize all multi Child controller.
FOR ii:=0 TO usiNumOfMultiChild-1 BY 1 DO	
	// Get child common if
	a_pMultiChildCIF[ii]:= THIS^.AddChild(a_pMultiChildCtrl[ii]^);	
	// Get specific interface for additional parmaeters or cur
	a_pMultiChildSIF[ii]:= a_pMultiChildCtrl[ii]^.getCtrlSIf();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{d67f7c09-3c51-43c4-95fd-99f3d6f44728}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_HFE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{f7d28a1a-3d0a-4c73-9cd1-02a1f80ddb25}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	;
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>