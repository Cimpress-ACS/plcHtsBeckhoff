<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.19">
  <POU Name="MiddlePRG_1" Id="{d0b780f9-d9b7-47f3-8805-851f8ce5d376}">
    <Declaration><![CDATA[PROGRAM MiddlePRG_1
VAR
	bolPlcStartupDone: BOOL := FALSE;
	bolHostInitDone: BOOL := FALSE;
	bolInitDone: BOOL := FALSE;
	uinTaskNbr : UINT := 2; // MiddleTask is Task Nr. 2
	pCtrl_CIf: POINTER TO T_Ctrl_CIf;
	pTmpSIf_DRV: POINTER TO T_Ctrl_SIf_DRV;
	pTmpSIf_SLB: POINTER TO T_Ctrl_SIf_SLB;
	pTmpSIf_STB: POINTER TO T_Ctrl_SIf_STB;
	pTmpSIf_MER: POINTER TO T_Ctrl_SIf_MER;
	jj: INT;

	fbTLC_2: FB_DRV;
	fbTLP_3: FB_DRV;
	fbTLP_10: FB_DRV;
	fbTLP_4: FB_DRV;
	fbTLP_5: FB_DRV;
	fbTLK_9: FB_DRV;

	fbMER_8: FB_MER; // configured with mode "MergeIntoTrp", needs faster task
	
	fbSLB_2: FB_SLB;
	fbDSB_2: FB_STB;
	fbSEP_2: FB_STB;
	fbBUF_5: FB_SLB;
	fbSBI_5: FB_STB;
	fbDBO_5: FB_STB;
	fbBUF_3: FB_SLB;
	fbSBI_3: FB_STB;
	fbBUF_10: FB_SLB;
	fbSBI_10: FB_STB;
	fbSLB_8: FB_SLB;
	fbSEP_8: FB_STB;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
call of all controller (FUB) for the middle task class.


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		16.09.2013		AVME/PRE	Start history
0.00.2		19.09.2013		AVME/PRE	Implement new Base Concept
0.00.3		23.09.2013		AVME/DSC	Definition of "par" and "cfg"
0.00.4		26.09.2013		AVME/DSC	Delete controller SBO_3 and SBO_10. Stopper physically not used.
0.00.5		08.10.2013		VP/RE		Optimizations FAT Bürglistrasse version
0.00.6		30.10.2013		AVME/DSC	Moved MER_8 to MiddlePRG. Test at the tool.
0.00.7		18.11.2013		AVME/MRU	Add decrementsensor 3.0-B3 at SBI_3 for test

___________________________________________________________________________________________________*)

// -----------------------------------------------------------------------------------------------
// Initialize the PLC Parameter and check the PLC health
// -----------------------------------------------------------------------------------------------
IF ((NOT bolPlcStartupDone) AND (g_uinStartProzess>=(uinTaskNbr-1))) THEN
	bolPlcStartupDone := TRUE;	
	
	// init	
	// ----------------------------------------------------------------------------------------------------------------------
	//  Incomming Loop
	// ----------------------------------------------------------------------------------------------------------------------
	
	// ----------------------------------
	// All Transports
	// ----------------------------------
	// ----------
	// TLC_2
	// ----------
	fbTLC_2.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLC_2);     		// TLC_2 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLC_2.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLC;   							// default configuration
	pTmpSIf_DRV^.Cfg.bolPulseExist := TRUE;
	pTmpSIf_DRV^.Cfg.usiCountBlockedSupervis := 2;
	pTmpSIf_DRV^.Cfg.dinPinDistance_um:= 75000; 						//75[mm/puls]
	pTmpSIf_DRV^.Cfg.dinDistPerPulse_um:= 37700;						// 37.7[mm/puls]

	// ----------
	// TLP_3
	// ----------
	fbTLP_3.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLP_3);     		// TLP_3 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLP_3.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLP;   							// default configuration
	pTmpSIf_DRV^.Cfg.bolPulseExist := TRUE;
	pTmpSIf_DRV^.Cfg.dinDistPerPulse_um:= 28400;						// 28.4[mm/puls]
	
	// ----------
	// TLP_10
	// ----------
	fbTLP_10.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLP_10);     	// TLP_10 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLP_10.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLP;   							// default configuration
	pTmpSIf_DRV^.Cfg.bolPulseExist := TRUE;
	pTmpSIf_DRV^.Cfg.dinDistPerPulse_um:= 28400;						// 28.4[mm/puls]
	
	// ----------
	// TLP_4
	// ----------
	fbTLP_4.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLP_4);     		// TLP_4 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLP_4.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLPsort;   							// default configuration
	pTmpSIf_DRV^.Cfg.bolPulseExist := TRUE;
	pTmpSIf_DRV^.Cfg.bolSpeedVariable := TRUE;
	pTmpSIf_DRV^.Par.usi_speedLevel := 1;
	pTmpSIf_DRV^.Cfg.dinDistPerPulse_um:= 28400;						// 28.4[mm/puls]

	// ----------
	// TLP_5
	// ----------
	fbTLP_5.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLP_5);     		// TLP_5 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLP_5.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLP;   							// default configuration

	// ----------
	// TLK_9
	// ----------
	fbTLK_9.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.TLK_9);     		// TLK_9 - init and entry fb_instance in global fb pointer array
	pTmpSIf_DRV := fbTLK_9.getCtrlSIf();
	pTmpSIf_DRV^.Cfg.eTyp := E_Typ_DRV.TLK;   							// default configuration
	pTmpSIf_DRV^.Cfg.bolPulseExist := TRUE;
	pTmpSIf_DRV^.Cfg.bolSpeedVariable := TRUE;
	pTmpSIf_DRV^.Cfg.dinDistPerPulse_um:= 37700;						// 37.7[mm/puls]
	//pTmpSIf_DRV^.Cfg.dinPinDistance_um:= 508000;						// 50.8[cm between pins]
	pTmpSIf_DRV^.Cfg.dinPinDistance_um:= 608000;						// 50.8[cm between pins]     RE:FAT change
	
	// ----------------------------------
	// All Buffer Elements
	// ----------------------------------
	
	// ----------
	// DSB_2
	// ----------
	fbDSB_2.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.DSB_2);     		// DSB_2 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbDSB_2.getCtrlSIf();
	
	// DSB_2 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := FALSE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 10;													// Based on: +2.0-B1 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 2;											// Based on: +2.0-Q2								
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= pTmpSIf_STB^.Cfg.dinMaxCapacity + 5;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
										
	// DSB_2 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 500;
	pTmpSIf_STB^.Par.udiSensorTime_ms := 2000;
	
	// ----------
	// SEP_2
	// ----------
	fbSEP_2.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SEP_2);     		// SEP_2 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbSEP_2.getCtrlSIf();
	
	// SEP_2 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := TRUE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 10;													// Based on: +2.0-B5 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 1;																		
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= 6;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;									
	
	// SEP_2 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 500;
	pTmpSIf_STB^.Par.udiSensorTime_ms := 2000;
	
	// ----------
	// SBI_5
	// ----------	
	fbSBI_5.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SBI_5);     		// SBI_5 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbSBI_5.getCtrlSIf();
		
	// SBI_5 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := TRUE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 20;													//ToDo: Number of hangers between +5.0 B4.0 and +5.0 B18.0
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 4;																		
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= 6;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
										
	// SBI_5 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 6000;										// Dependent speed of +5.0 M1
	pTmpSIf_STB^.Par.udiSensorTime_ms := 3000;
	
	// ----------
	// DBO_5
	// ----------	
	fbDBO_5.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.DBO_5);     		// DBO_5 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbDBO_5.getCtrlSIf();
	
	// DBO_5 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := FALSE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 20;													// Based on: +5.0-B6 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 3;											// Based on: +5.0-Q7																
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= pTmpSIf_STB^.Cfg.dinMaxCapacity + 5;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
									
	// DBO_5 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 250;											
	pTmpSIf_STB^.Par.udiSensorTime_ms := 2000;
	
	// ----------
	// SBI_3
	// ----------		
	fbSBI_3.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SBI_3);     		// SBI_3 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbSBI_3.getCtrlSIf();
	
	// SBI_3 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := TRUE;
	pTmpSIf_STB^.Cfg.bolHasDecrementSensor:= TRUE;											// Decrement with sensor, not cylinder stroke   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 466;													// Number of hangers between +3.0 Q4.0 and +3.0 B18.0 (7000mm distance / 15mm between hanger to hanger) 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 1;																		
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= 6;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
										
	// SBI_3 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 2000;										// Dependent speed of +3.0 M4
	pTmpSIf_STB^.Par.udiSensorTime_ms := 3000;
	
	// ----------
	// SBI_10
	// ----------
	fbSBI_10.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SBI_10);     	// SBI_10 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbSBI_10.getCtrlSIf();
	
	// SBI_10 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := TRUE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 400;													// Number of hangers between +10.0 Q4.0 and +10.0 B8.0 (6000mm distance / 15mm between hanger to hanger) 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 1;																		
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= 8;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
										
	// SBI_10 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 2000;										// Dependent speed of +10.0 M11
	pTmpSIf_STB^.Par.udiSensorTime_ms := 3000;

	// ----------
	// SEP_8
	// ----------		
	fbSEP_8.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SEP_8);     		// SEP_8 - init and entry fb_instance in global fb pointer array
	pTmpSIf_STB := fbSEP_8.getCtrlSIf();
	
	// SEP_8 - configuration		
	pTmpSIf_STB^.Cfg.bolHasBufferFullSensor := TRUE;   													
	pTmpSIf_STB^.Cfg.bolHasHangerDetection := TRUE;   				
	pTmpSIf_STB^.Cfg.dinMaxCapacity:= 11;													// Based on: +8.0-B6 
	pTmpSIf_STB^.Cfg.uinNumOfHangersPerPulse:= 1;																		
	pTmpSIf_STB^.Cfg.bolCylPosLostMonitoring:= FALSE;
	pTmpSIf_STB^.Cfg.dinMaxNumOfHangers_PosMonitoring:= pTmpSIf_STB^.Cfg.dinMaxCapacity + 5;
	pTmpSIf_STB^.Cfg.bolReleaseAllNonPulse:= FALSE;
										
	// SEP_8 - parameter	
	pTmpSIf_STB^.Par.udiPulseLengthValve_ms := 200;   // needs 200ms, work in combination with a MER configured with mode "MergeIntoTrp"
	pTmpSIf_STB^.Par.udiSensorTime_ms := 2000;
	
	
	// ----------------------------------
	// Elementgroups of Slide- Buffers
	// ----------------------------------
	
	// ----------
	// SLB_2
	// ----------	
	fbSLB_2.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SLB_2);     		// SLB_2 - init and entry fb_instance in global fb pointer array
	fbSLB_2.AddBufferZone(g_a_pCtrlInst[E_CtrlId.SEP_2]);				// Add Element as Type Bufferelement
	fbSLB_2.AddBufferZone(g_a_pCtrlInst[E_CtrlId.DSB_2]);				// Add Element as Type Bufferelement

	// ----------
	// BUF_5
	// ----------	
	fbBUF_5.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.BUF_5);     		// BUF_5 - init and entry fb_instance in global fb pointer array
	fbBUF_5.AddBufferZone(g_a_pCtrlInst[E_CtrlId.DBO_5]);				// Add Element as Type Bufferelement
	fbBUF_5.AddBufferZone(g_a_pCtrlInst[E_CtrlId.SBI_5]);				// Add Element as Type Bufferelement

	// ----------
	// BUF_3
	// ----------	
	fbBUF_3.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.BUF_3);     		// BUF_3 - init and entry fb_instance in global fb pointer array
	fbBUF_3.AddBufferZone(g_a_pCtrlInst[E_CtrlId.SBI_3]);				// Add Element as Type Bufferelement
	
	// ----------
	// BUF_10
	// ----------	
	fbBUF_10.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.BUF_10);     	// BUF_10 - init and entry fb_instance in global fb pointer array
	fbBUF_10.AddBufferZone(g_a_pCtrlInst[E_CtrlId.SBI_10]);				// Add Element as Type Bufferelement
	
	// ----------
	// SLB_8
	// ----------	
	fbSLB_8.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.SLB_8);     		// SLB_8 - init and entry fb_instance in global fb pointer array
	fbSLB_8.AddBufferZone(g_a_pCtrlInst[E_CtrlId.SEP_8]);				// Add Element as Type Bufferelement
	
	// ----------------------------------
	// MERGERS
	// ----------------------------------
	
	// ----------
	// MER_8
	// ----------
	fbMER_8.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.MER_8);     // init and entry fb_instance in global fb pointer array
	pTmpSIf_MER:= fbMER_8.getCtrlSIf();
	// ADD Childs
	fbMER_8.AddLine(g_a_pCtrlInst[E_CtrlId.SLB_8]);

	// MER_8 - configuration fix	
	pTmpSIf_MER^.Cfg.usiMergeMainMode:= E_Typ_MER_MODE.Automatic;	
	pTmpSIf_MER^.Par.dinHangerSensorPosition_um := 770000; 				    // 770 mm  Distance between pin sensor and hanger detected sensor
	pTmpSIf_MER^.Par.dinPinLenght_um:= 25000; 								// 25 mm								
	pTmpSIf_MER^.Par.dinSectionLenght_um:= 484000;							// 484 mm
	pTmpSIf_MER^.Par.dinTrigStartOffset_um:= 1000;							// 1 mm						
	pTmpSIf_MER^.Par.dinTrigEndOffset_um:= 10000;							// 10 mm							
	
  	// MER_8 - parameters fix	
	pTmpSIf_MER^.Par.a_LinePar[0].udiWaitTimeLineFree_ms:= 0;

	// MER_8 - init parameters for line control	
	pTmpSIf_MER^.Par.a_LinePar[0].usiMergeMode:= E_Typ_MER_AUTO_MODE.MergeIntoTrp;
	pTmpSIf_MER^.Par.a_LinePar[0].dinLinePosition_um:= 1900000;				// 1900 mm  Distance between pin sensor and the point where the line comes into the transport system

	g_uinStartProzess := g_uinStartProzess + 1; // For StartUp order
	
END_IF
// -----------------------------------------------------------------------------------------------


// -----------------------------------------------------------------------------------------------
// The host system is downloading all parameter at startup. 
// bolPlcStartupDone will be set to true after the Host is done with the initialization
// -----------------------------------------------------------------------------------------------
IF (bolPlcStartupDone AND (NOT bolHostInitDone) AND (NOT bolInitDone) AND (g_uinStartProzess>=(uinTaskNbr-1)+10)) THEN
	g_uinStartProzess := g_uinStartProzess + 1;
	bolHostInitDone := TRUE;
END_IF
// -----------------------------------------------------------------------------------------------


// -----------------------------------------------------------------------------------------------
// Start PLC code initialization
// -----------------------------------------------------------------------------------------------
IF (NOT bolInitDone AND bolPlcStartupDone AND bolHostInitDone AND (g_uinStartProzess>=(uinTaskNbr-1)+20)) THEN
	
	// init
	g_uinStartProzess := g_uinStartProzess + 1;	
	bolInitDone := TRUE;
END_IF
// -----------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------
// Normal Run mode after all the initialization is done
// -----------------------------------------------------------------------------------------------
IF (bolInitDone AND bolPlcStartupDone AND bolHostInitDone AND (g_uinStartProzess>=(20+c_uinCntTaskClass))) THEN
	
	//****************************************************************************************************
	// cyclic controller calls
	//****************************************************************************************************
	
	// TLC_2
	fbTLC_2.In_bolOverload := NOT(In_bol_2_0_A1_Motor_Protection);
	fbTLC_2.In_bolPulse := In_bol_2_0_B15_Charging_impulse_TLC_TLT;
	fbTLC_2.In_a_bolBlockedSupvervis[1] := In_bol_2_0_B13_Blocking_monitoring;
	fbTLC_2.In_a_bolBlockedSupvervis[2] := In_bol_2_0_B16_Blocking_monitoring;
	fbTLC_2();
	Out_bol_2_0_A1_Drive_On := fbTLC_2.Out_bolSpeed_1;

	// TLP_3
	fbTLP_3.In_bolOverload := NOT(In_bol_3_0_A1_Motor_Protection);
	fbTLP_3.In_bolPulse := In_bol_3_0_B7_Charging_impulse_TLK_TLP;
	fbTLP_3();
	Out_bol_3_0_A1_Drive_On := fbTLP_3.Out_bolSpeed_1;

	// TLP_10
	fbTLP_10.In_bolOverload := NOT(In_bol_10_0_A1_Motor_Protection);
	fbTLP_10.In_bolPulse := In_bol_10_0_B7_Charging_impulse_TLK_TLP_A;
	fbTLP_10();
	Out_bol_10_0_A1_Drive_On := fbTLP_10.Out_bolSpeed_1;

	// TLP_4
	fbTLP_4.In_bolOverload := In_bol_4_0_T1_Motor_Protection;
	fbTLP_4.In_bolPulse := In_bol_4_0_B23_Charging_impulse_TLK_TLP;
	fbTLP_4();
	Out_bol_4_0_K1_Drive_On := fbTLP_4.Out_bolSpeed_1;
	Out_bol_4_0_K2_Drive_On := fbTLP_4.Out_bolSpeed_2;

	// TLP_5
	fbTLP_5.In_bolOverload := NOT(In_bol_5_0_A1_Motor_Protection);
	fbTLP_5();
	Out_bol_5_0_A1_Drive_On := fbTLP_5.Out_bolSpeed_1;

	// TLK_9
	fbTLK_9.In_bolOverload := In_bol_9_0_T1_Motor_Protection;
	fbTLK_9.In_bolPulse := In_bol_9_0_B13_Charging_impulse_TLK_TLP_A;
	fbTLK_9();
	Out_bol_9_0_K1_Drive_On := fbTLK_9.Out_bolSpeed_1;
	Out_bol_9_0_K2_Drive_On := fbTLK_9.Out_bolSpeed_2;
	
	// SLB_2
	fbSLB_2();	
	// DSB_2
	fbDSB_2.In_bolBufferFull := In_bol_2_0_B1_Doublestopper_full;
	fbDSB_2.In_bolDecrementCounter:= fbDSB_2.In_bolDecrementCounter;
	fbDSB_2();
	Out_bol_2_0_Q2_Doublestopper := fbDSB_2.Out_bolRetract;	
	// SEP_2
	fbSEP_2.In_bolHangerDetected := In_bol_2_0_B3_Hanger_in_Seperator;
	fbSEP_2.In_bolBufferFull := In_bol_2_0_B5_Seperator_full;
	fbSEP_2();
	Out_bol_2_0_Q4_Seperator := fbSEP_2.Out_bolRetract;
			
	// BUF_5
	fbBUF_5();	
	// SBI_5
	fbSBI_5.In_bolBufferFull := In_bol_5_0_B18_TLP_full;
	fbSBI_5.In_bolHangerDetected := In_bol_5_0_B4_Hanger_at_pilotStopper;
	fbSBI_5();
	Out_bol_5_0_Q5_Pilotstopper := fbSBI_5.Out_bolRetract;
    // DBO_5
	fbDBO_5.In_bolBufferFull := In_bol_5_0_B6_Doublestopper_full;
	fbDBO_5();
	Out_bol_5_0_Q7_Doublestopper := fbDBO_5.Out_bolRetract;
		
	// BUF_3
	fbBUF_3();
	// SBI_3
	fbSBI_3.In_bolHangerDetected := In_bol_3_0_B3_Hanger_at_pilotStopper;
	fbSBI_3.In_bolBufferFull := In_bol_3_0_B18_TLP_full;
	fbSBI_3.In_bolDecrementCounter := In_bol_3_0_B3_Hanger_at_pilotStopper;	// Decrement with sensor, not cylinder stroke
	fbSBI_3();
	Out_bol_3_0_Q4_Pilotstopper := fbSBI_3.Out_bolRetract;

	// BUF_10
	fbBUF_10();
	// SBI_10
	fbSBI_10.In_bolHangerDetected := In_bol_10_0_B3_Hanger_at_pilotStopper;
	fbSBI_10.In_bolBufferFull := In_bol_10_0_B8_TLP_50percent_full;
	fbSBI_10();
	Out_bol_10_0_Q4_Pilotstopper := fbSBI_10.Out_bolRetract;
	
	// SLB_8
	fbSLB_8();
	fbSEP_8.In_bolHangerDetected:= In_bol_8_0_B1_Hanger_in_Seperator;
	fbSEP_8.In_bolBufferFull := In_bol_8_0_B6_Seperator_full;
	fbSEP_8();
	Out_bol_8_0_Q7_Seperator := fbSEP_8.Out_bolRetract;
	
	// MER_8
	fbMER_8.In_bolHangerDetected := In_bol_9_0_B16_Hanger_in_station;
	fbMER_8.In_bolPinDetected := In_bol_9_0_B15_Charging_impulse;	
	fbMER_8();
	
END_IF
// -----------------------------------------------------------------------------------------------]]></ST>
    </Implementation>
    <ObjectProperties>﻿<XmlArchive>
  <Data>
    <o xml:space="preserve" t="POUImageProperty">
      <n n="ImageData" />
      <v n="TransparencyColor">"White"</v>
      <v n="MakeTransparent">false</v>
    </o>
  </Data>
  <TypeList>
    <Type n="Boolean">System.Boolean</Type>
    <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
    <Type n="String">System.String</Type>
  </TypeList>
</XmlArchive></ObjectProperties>
  </POU>
</TcPlcObject>